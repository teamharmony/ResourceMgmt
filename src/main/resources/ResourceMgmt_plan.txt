create database resourcemgmt;
use resourcemgmt;


drop table users;
create table users (
	username varchar(60) not null,
	password varchar(32) not null,
	resetpwd smallint default 0,
	primary key(username)
	) engine=innoDB;

drop table authorities;
create table authorities (
	username varchar(60) not null,
	authority varchar(10) not null,
	foreign key(username) references users(username)
	) engine=innoDB;

drop table user_details;
create table user_details(
	name varchar(30) not null,
	username varchar(60) not null,
	visible smallint default 1,
	email varchar(60) not null,
	skill varchar(120) not null,
	contact varchar(15) not null,
	profilePic longblob,
	latitude double,
	longitude double,
	primary key(email),
	foreign key(username) references users(username)
	) engine=innoDB;


CREATE UNIQUE INDEX search_by_name
ON user_details ( name);


drop table meetings;
create table meetings(
	id mediumint not null auto_increment,
	fromUserName varchar(60) not null,
	toUserName varchar(60) not null,
	agenda varchar(35) not null,
	details varchar(500) not null,
	meetDateTime int unsigned,
	venue varchar(200) not null,
	status smallint not null default 0,
	primary key(id),
	foreign key(fromUserName) references users(username),
	foreign key(toUserName) references users(username)
) engine=innoDB;


drop table messages;
create table messages(
	id MEDIUMINT NOT NULL AUTO_INCREMENT,
	parentId MEDIUMINT,
	topicId MEDIUMINT,
	fromUserName varchar(60) not null,
	toUserName varchar(60) not null,
	message varchar(500) not null,
	fromStatus smallint not null default 0,
	toStatus smallint not null default 0,
	primary key(id),
	foreign key(fromUserName) references users(username),
	foreign key(toUserName) references users(username)

) engine=innoDB;


drop table feedback;
create table feedback(
	id mediumint not null auto_increment,
	fromUserName varchar(60) not null,
	subject varchar(35) not null,
	message varchar(500) not null,
	primary key(id),
	foreign key(fromUserName) references users(username)
) engine=innoDB;


drop procedure createFeedbackRequest;		
delimiter //
create procedure createFeedbackRequest(
								IN _fromUserName varchar(60), 
								IN _subject varchar(35),
								IN _message varchar(500)
							)
	begin
		insert into feedback(fromUserName, subject, message)
		values(_fromUserName, _subject, _message);
	end//
delimiter ;


drop procedure createMeetRequest;		
delimiter //
create procedure createMeetRequest(
								IN _fromUserName varchar(60), 
								IN _toUserName varchar(60),
								IN _agenda varchar(35),
								IN _details varchar(500),
								IN _dateTime int,
								IN _venue varchar(200)
							)
	begin
		insert into meetings(fromUserName, toUserName, agenda, details, meetDateTime, venue, status)
		values(_fromUserName, _toUserName, _agenda, _details, _dateTime, _venue, 0);
	end//
delimiter ;


drop procedure showMeetRequests;		
delimiter //
create procedure showMeetRequests(IN _userName varchar(60))
	begin

		DROP TEMPORARY TABLE IF EXISTS tblResults;
	  	CREATE TEMPORARY TABLE IF NOT EXISTS tblResults  (
			id mediumint not null,
			fromUserName varchar(60),
			toUserName varchar(60),
			agenda varchar(35),
			details varchar(500),
			meetDateTime int unsigned,
			venue varchar(200),
			status smallint
	  	);
	
		insert into tblResults (id, fromUserName, agenda, details, meetDateTime, venue, status)
		select m.id, m.fromUserName, m.agenda, m.details, m.meetDateTime, m.venue, m.status
		from meetings as m
		where m.toUserName = _userName;

		insert into tblResults(id, toUserName, agenda, details, meetDateTime, venue, status)
		select m.id, m.toUserName, m.agenda, m.details, m.meetDateTime, m.venue, m.status
		from meetings as m
		where m.fromUserName = _userName;
		
		select m.id, m.fromUserName, m.toUserName, m.agenda, m.details, m.meetDateTime, m.venue, m.status, u.name from tblResults as m, user_details as u
		where u.username = m.fromUserName or u.username = m.toUserName;
		
	end//
delimiter ;



drop procedure updateMeetRequestStatus;		
delimiter //
create procedure updateMeetRequestStatus(IN _userName varchar(60), IN _id mediumint,  IN _status smallint)
	begin
		DECLARE meetExist INT DEFAULT 0;
		
		select count(*) into meetExist from meetings
		where toUserName = _userName and id = _id;
		
		if meetExist <= 0 then
			SIGNAL SQLSTATE VALUE '99999'
      		SET MESSAGE_TEXT = 'An error occurred, No such meeting present.';			
		end if;
			
		update meetings 
		set status = _status
		where toUserName = _userName and id = _id;
	end//
delimiter ;


drop procedure dopMeetRequests;		
delimiter //
create procedure dopMeetRequests()
	begin
		delete from meetings 
		where meetDateTime < unix_timestamp();
	end//
delimiter ;


drop procedure createMessageRequest;		
delimiter //
create procedure createMessageRequest(
								IN _parentId MEDIUMINT,
								IN _topicId MEDIUMINT,
								IN _fromUserName varchar(60), 
								IN _toUserName varchar(60),
								IN _message varchar(500)
							)
	begin
	
		insert into messages(parentId, topicId, fromUserName, toUserName, message, fromStatus, toStatus)
		values(_parentId, _topicId, _fromUserName, _toUserName, _message, 0, 0);
	end//
delimiter ;



drop procedure showMessageRequests;		
delimiter //
create procedure showMessageRequests(IN _userName varchar(60))
	begin

		DROP TEMPORARY TABLE IF EXISTS tblResults;
	  	CREATE TEMPORARY TABLE IF NOT EXISTS tblResults  (
			id MEDIUMINT,
			parentId MEDIUMINT,
			topicId MEDIUMINT,
			fromUserName varchar(60),
			toUserName varchar(60),
			message varchar(500),
			fromStatus smallint,
			toStatus smallint
	  	);

		
		insert into tblResults (id, parentId, topicId, fromUserName, message, toStatus, fromStatus)
		select m.id, m.parentId, m.topicId, m.fromUserName, m.message, m.toStatus, m.fromStatus
		from messages as m
		where m.toUserName = _userName;
		
		insert into tblResults(id, parentId, topicId, toUserName, message, fromStatus, toStatus)
		select m.id, m.parentId, m.topicId, m.toUserName, m.message, m.fromStatus, m.toStatus
		from messages as m
		where m.fromUserName = _userName;
	
										
		select m.id, m.parentId, m.topicId, m.fromUserName, m.toUserName, m.message, m.toStatus, m.fromStatus, u.name from tblResults as m, user_details as u
		where u.username = m.fromUserName or u.username = m.toUserName;
			
		
	end//
delimiter ;


drop procedure updateMessageRequestStatus;		
delimiter //
create procedure updateMessageRequestStatus(IN _userName varchar(60), IN _id mediumint,  IN _status smallint)
	begin
		DECLARE msgExist INT DEFAULT 0;
		DECLARE creator  INT DEFAULT 0;
		
		select count(*) into msgExist from messages
		where id = _id;
		
		if msgExist <= 0 then
			SIGNAL SQLSTATE VALUE '99999'
      		SET MESSAGE_TEXT = 'An error occurred, No such message present.';			
		end if;
		
		select count(*) into creator from messages 	
		where fromUserName = _userName and id = _id;
		
		if creator > 0 then
			update messages 
			set fromStatus = _status
			where id = _id;
		else
			update messages 
			set toStatus = _status
			where id = _id;		
		end if;	
	end//
delimiter ;



drop procedure updateLocation;		
delimiter //
create procedure updateLocation(IN _username varchar(60), IN _latitude double, IN _longitude double)
	begin
		update user_details
			set latitude = _latitude, longitude = _longitude
				where username = _username;
	end//
delimiter ;


drop procedure isUserNameOccupied;		
delimiter //
create procedure isUserNameOccupied(IN _username varchar(60), OUT _occupied smallint )
	begin
		select count(*) into _occupied from users where username = _username; 
	end//
delimiter ;


drop procedure isEmailOccupied;		
delimiter //
create procedure isEmailOccupied(IN _email varchar(60), OUT _occupied smallint )
	begin
		select count(*) into _occupied from user_details where email = _email; 
	end//
delimiter ;


drop procedure findUserByName;		
delimiter //
create procedure findUserByName(IN _name varchar(30))
	begin
		select ud.name ,
			ud.username,
			ud.email,
			ud.skill,
			ud.contact,
			ud.latitude,
			ud.longitude
		from user_details as ud
		 where 	lower(ud.name) like concat('%',  lower(_name) , '%')  and
		 ud.visible != 0;
	end//
delimiter ;




drop procedure findUserByLocation;		
delimiter //
create procedure findUserByLocation(IN _latitude1 double, IN _latitude2 double, 
		IN _longitude1 double, IN _longitude2 double)
	begin
		select ud.name ,
			ud.username,
			ud.email,
			ud.skill,
			ud.contact,
			ud.latitude,
			ud.longitude		
		from user_details as ud 
		where 
		(ud.latitude between _latitude1 and _latitude2) and
		(ud.longitude between _longitude1 and _longitude2) and
		ud.visible != 0;
	end//
delimiter ;




drop procedure findUserBySkill;		
delimiter //
create procedure findUserBySkill(IN skills varchar(120))
begin
	DECLARE strLen    INT DEFAULT 0;
	DECLARE SubStrLen INT DEFAULT 0;

	IF skills IS NULL THEN
    	SET skills = '';
  	END IF;


	DROP TEMPORARY TABLE IF EXISTS tblResults;
  	CREATE TEMPORARY TABLE IF NOT EXISTS tblResults  (
		name varchar(30) not null,
		username varchar(60) not null,
		email varchar(60) not null,
		skill varchar(120) not null,
		contact varchar(15) not null,
		latitude double,
		longitude double
  	);
  

	do_this:
  		LOOP
    		SET strLen = CHAR_LENGTH(skills);

			Insert into tblResults
			select ud.name, ud.username, ud.email, ud.skill, ud.contact, ud.latitude, ud.longitude  
			from user_details as ud
			where 
			lower(ud.skill) like concat('%', lower(SUBSTRING_INDEX(skills, ',', 1)) , '%') and
			ud.visible != 0;
			
    	    SET SubStrLen = CHAR_LENGTH(SUBSTRING_INDEX(skills, ',', 1)) + 2;
    		SET skills = MID(skills, SubStrLen, strLen);

    		IF skills = '' THEN
      			LEAVE do_this;
   		 	END IF;
  
  		END LOOP do_this;

	select DISTINCT * from tblResults;
		
end//
delimiter ;




drop procedure registerUser;		
delimiter //
create procedure registerUser(IN _username varchar(60), 
						IN _pwd varchar(32),
						IN _authority varchar(10),
						IN _name varchar(30),
						IN _visible smallint,
						IN _skill varchar(120),
						IN _email varchar(60), 
						IN _contact varchar(15),
						IN _profilePic longblob						
						)
begin 

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		rollback;
		resignal;
	END;
	start transaction;
		insert into users(username, password) values(_username, md5(_pwd));
		insert into authorities (username, authority) values(_username, _authority);
		insert into user_details (username, name, email, skill, contact, visible) 
			values(_username, _name, _email, _skill, _contact, _visible);
			
		if _profilePic is not null then
			update user_details
				set profilePic = _profilePic where username = _username;
		end if; 
	commit;


end//
delimiter ;



drop procedure updateUser;
delimiter //
create procedure updateUser(IN _username varchar(60), 
						IN _name varchar(30),
						IN _email varchar(60),
						IN _skill varchar(120),
						IN _contact varchar(15),
						IN _profilePic longblob,
						IN _visible smallint)
begin 
			
		if _name is not null then
			update user_details
				set name = _name where username = _username;
		end if;
		
		if _email is not null then
			update user_details
				set email = _email where username = _username;
		end if;
		
		if _visible is not null then
			update user_details
				set visible = _visible where username = _username;
		end if;
		
		
		if _skill is not null then
			update user_details
				set skill = _skill where username = _username;
		end if;
		
		if _contact is not null then
			update user_details
				set contact = _contact where username = _username;
		end if;
			
		if _profilePic is not null then
			update user_details
				set profilePic = _profilePic where username = _username;
		end if;
					
end//
delimiter ;

drop procedure updatePassword;
delimiter //
create procedure updatePassword(IN _username varchar(60), 
						IN _pwd varchar(32), IN _resetpwd smallint)
begin 
	update users
		set password = md5(_pwd), resetpwd = _resetpwd
			where username = _username;
end//
delimiter ;


drop procedure getUserDetails;
delimiter //
create procedure getUserDetails(IN _username varchar(60),
						OUT _name varchar(30),
						OUT _email varchar(60), 
						OUT _skill varchar(120),
						OUT _contact varchar(15),
						OUT _visible smallint
)
begin 
	select name,  email, skill,  contact, visible  into  
		_name, _email, _skill, _contact, _visible
			from user_details
			where username = _username;
end//
delimiter ;



drop procedure getUserProfilePic;
delimiter //
create procedure getUserProfilePic(IN _username varchar(60),
						OUT _profilePic longblob
)
begin 
	select profilePic into _profilePic
		from user_details
			where username = _username;
end//
delimiter ;

drop procedure isPwdReset;
delimiter //
create procedure isPwdReset(IN _username varchar(60), OUT _resetpwd smallint)
begin 
		select resetpwd into _resetpwd from users
			where username = _username;
end//
delimiter ;

