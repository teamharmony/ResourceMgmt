<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans

       http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security-3.2.xsd
       http://www.springframework.org/schema/security/oauth2
       http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<import resource="resourceMgmt-data.xml" />


	<!-- Definition of the Authentication Service -->
	<http pattern="/oauth/token" create-session="stateless"
		authentication-manager-ref="clientAuthenticationManager"
		entry-point-ref="clientAuthenticationEntryPoint" xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<anonymous enabled="false" />
		<http-basic />
		<!-- include this only if you need to authenticate clients via request 
			parameters -->
		<custom-filter ref="clientCredentialsTokenEndpointFilter"
			after="BASIC_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>

	<!-- Protected resources -->
	<http pattern="/resources/**" create-session="never"
		entry-point-ref="oauthAuthenticationEntryPoint"
		access-decision-manager-ref="accessDecisionManager"
		xmlns="http://www.springframework.org/schema/security">
		<anonymous enabled="true" />
		<intercept-url pattern="/resources" method="POST"
			access="ROLE_ANONYMOUS" /> <!-- in-secured POST -->
		<intercept-url pattern="/resources/**" access="ROLE_USER" />
		<!--  New validation end-points -->
		<intercept-url pattern="/validate/userName" access="ROLE_ANONYMOUS" />
		<intercept-url pattern="/validate/email" access="ROLE_ANONYMOUS" />
		<!--  New validation end-points END -->
		<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>
	


	<http pattern="/password/**" create-session="never"
		entry-point-ref="oauthAuthenticationEntryPoint"
		access-decision-manager-ref="accessDecisionManager"
		xmlns="http://www.springframework.org/schema/security">
		<anonymous enabled="true" />
		<intercept-url pattern="/password/forgot" access="ROLE_ANONYMOUS" />
		<intercept-url pattern="/password/reset" access="ROLE_USER" />
		<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>

	<!-- Since we have a stateless setup, we have an explicit endpoint to logout 
		by invalidating the tokens -->
	<http pattern="/logout" create-session="never"
		entry-point-ref="oauthAuthenticationEntryPoint"
		access-decision-manager-ref="accessDecisionManager"
		xmlns="http://www.springframework.org/schema/security">
		<anonymous enabled="false" />
		<intercept-url pattern="/logout" access="ROLE_USER"
			method="GET" />
		<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>


	<bean id="oauthAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="meetMePal" />
	</bean>

	<bean id="clientAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="meetMePalClient" />
		<property name="typeName" value="Basic" />
	</bean>

	<bean id="oauthAccessDeniedHandler"
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<bean id="clientCredentialsTokenEndpointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="clientAuthenticationManager" />
	</bean>

	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased"
		xmlns="http://www.springframework.org/schema/beans">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<bean class="org.springframework.security.access.vote.RoleVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</list>
		</constructor-arg>
	</bean>

	<!-- Authentication in config file -->
	<authentication-manager id="clientAuthenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		<authentication-provider user-service-ref="clientDetailsUserService" />
	</authentication-manager>

	<authentication-manager alias="authenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		<authentication-provider>
			<!-- <user-service id="userService"> <user name="admin" authorities="ROLE_USER" 
				password="admin" /> <user name="guest" authorities="ROLE_USER" password="guest" 
				/> </user-service> -->

			<password-encoder hash="md5"></password-encoder>
			<jdbc-user-service data-source-ref="dataSource"
				users-by-username-query="select 
				username, password, true as enabled from users where username= ?"
				authorities-by-username-query="select 
				users.username, authorities.authority from users, authorities where users.username = ? " />

		</authentication-provider>
	</authentication-manager>

	<bean id="clientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetails" />
	</bean>

	<!-- Token Store -->
	<bean id="tokenStore"
		class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" />

	<bean id="tokenServices"
		class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<property name="tokenStore" ref="tokenStore" />
		<property name="supportRefreshToken" value="true" />
		<property name="clientDetailsService" ref="clientDetails" />
	</bean>

	<bean id="userApprovalHandler"
		class="org.springframework.security.oauth2.provider.approval.TokenServicesUserApprovalHandler">
		<property name="tokenServices" ref="tokenServices" />
	</bean>

	<!-- Token management -->
	<oauth:authorization-server
		client-details-service-ref="clientDetails" token-services-ref="tokenServices"
		user-approval-handler-ref="userApprovalHandler">
		<oauth:refresh-token />
		<oauth:password />
	</oauth:authorization-server>

	<oauth:resource-server id="resourceServerFilter"
		token-services-ref="tokenServices" />

	<!-- Client Definition -->
	<oauth:client-details-service id="clientDetails">
		<oauth:client client-id="meetMePal"
			authorized-grant-types="password,refresh_token" authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT"
			scope="read,write,trust" access-token-validity="3000"
			refresh-token-validity="604800" />

	</oauth:client-details-service>

	<!-- <http pattern="/logout" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint" 
		access-decision-manager-ref="accessDecisionManager" xmlns="http://www.springframework.org/schema/security"> 
		<anonymous enabled="false" /> <intercept-url pattern="/logout" access="ROLE_CLIENT" 
		method="GET" /> <sec:logout invalidate-session="true" logout-url="/logout" 
		success-handler-ref="logoutSuccessHandler" /> <custom-filter ref="resourceServerFilter" 
		before="PRE_AUTH_FILTER" /> <access-denied-handler ref="oauthAccessDeniedHandler" 
		/> </http> -->

	<!-- <bean id="logoutSuccessHandler" class="com.vivsoft.service.LogOutHanlder"> 
		<property name="tokenStore" ref="tokenStore"></property> </bean> -->


	<!-- <sec:global-method-security pre-post-annotations="enabled" proxy-target-class="true"> 
		<sec:expression-handler ref="oauthExpressionHandler"/> </sec:global-method-security> 
		<oauth:expression-handler id="oauthExpressionHandler"/> <oauth:web-expression-handler 
		id="oauthWebExpressionHandler"/> -->

	<bean id="resourceResolverFilter" class="prj.resources.mgmt.filter.ResourceResolver">
		<property name="tokenStore" ref="tokenStore"></property>
	</bean>
	
	
</beans>
